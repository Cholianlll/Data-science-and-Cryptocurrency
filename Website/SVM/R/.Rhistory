knitr::opts_chunk$set(echo = TRUE)
train_x
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,reshape,naivebayes,e1071,caret)
RecordDF_A<-read.csv(file = 'Crypto_quotes_with_change_label.csv', stringsAsFactors=TRUE)
RecordDF_A[1:5,1:5]
# row number
ncol(RecordDF_A)
# col number
nrow(RecordDF_A)
str(RecordDF_A[,c(2:23)])
str(RecordDF_A[,25:ncol(RecordDF_A)])
RecordDF_A$MACD.indicator <- as.factor(RecordDF_A$MACD.indicator)
RecordDF_A$MACD.positionz <- as.factor(RecordDF_A$MACD.position)
RecordDF_A$EMA.trend <- as.factor(RecordDF_A$EMA.trend)
RecordDF_A$Quotes_label <- as.factor(RecordDF_A$Quotes_label)
table(RecordDF_A$Quotes_label)
# Drop token (useless col)
Token <- RecordDF_A$token
RecordDF_A<-RecordDF_A[-c(1)]
RecordDF_A <- na.omit(RecordDF_A)
# Train test split
DataSize=nrow(RecordDF_A) ## how many rows?
TrainingSet_Size<-floor(DataSize*(3/4)) ## Size for training set
TestSet_Size <- DataSize - TrainingSet_Size ## Size for testing set
set.seed(123)
MyTrainSample <- sample(nrow(RecordDF_A),
TrainingSet_Size,replace=FALSE)
# training data
MyTrainingSET <- RecordDF_A[MyTrainSample,]
# table(MyTrainingSET$Quotes_label)
# testing data
MyTestSET <- RecordDF_A[-MyTrainSample,]
# table(MyTestSET$Quotes_label)
# true label of test data
TestKnownLabels <- MyTestSET$Quotes_label
MyTestSET <- MyTestSET[ , -which(names(MyTestSET) %in% c("Quotes_label"))]
meltData <- melt(MyTrainingSET[2:(ncol(MyTrainingSET)-11)],ignore_index = FALSE)
boxplot(data=meltData, value~variable)
train_x
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,reshape,naivebayes,e1071,caret)
RecordDF_A<-read.csv(file = 'Crypto_quotes_with_change_label.csv', stringsAsFactors=TRUE)
RecordDF_A[1:5,1:5]
# row number
ncol(RecordDF_A)
# col number
nrow(RecordDF_A)
str(RecordDF_A[,c(2:23)])
str(RecordDF_A[,25:ncol(RecordDF_A)])
RecordDF_A$MACD.indicator <- as.factor(RecordDF_A$MACD.indicator)
RecordDF_A$MACD.positionz <- as.factor(RecordDF_A$MACD.position)
RecordDF_A$EMA.trend <- as.factor(RecordDF_A$EMA.trend)
RecordDF_A$Quotes_label <- as.factor(RecordDF_A$Quotes_label)
table(RecordDF_A$Quotes_label)
# Drop token (useless col)
Token <- RecordDF_A$token
RecordDF_A<-RecordDF_A[-c(1)]
RecordDF_A <- na.omit(RecordDF_A)
# Train test split
DataSize=nrow(RecordDF_A) ## how many rows?
TrainingSet_Size<-floor(DataSize*(3/4)) ## Size for training set
TestSet_Size <- DataSize - TrainingSet_Size ## Size for testing set
set.seed(123)
MyTrainSample <- sample(nrow(RecordDF_A),
TrainingSet_Size,replace=FALSE)
# training data
MyTrainingSET <- RecordDF_A[MyTrainSample,]
# table(MyTrainingSET$Quotes_label)
# testing data
MyTestSET <- RecordDF_A[-MyTrainSample,]
# table(MyTestSET$Quotes_label)
# true label of test data
TestKnownLabels <- MyTestSET$Quotes_label
MyTestSET <- MyTestSET[ , -which(names(MyTestSET) %in% c("Quotes_label"))]
meltData <- melt(MyTrainingSET[2:(ncol(MyTrainingSET)-11)],ignore_index = FALSE)
boxplot(data=meltData, value~variable)
train_x = MyTrainingSET[1:(ncol(MyTrainingSET)-4)]
train_y = MyTrainingSET[ncol(MyTrainingSET)]
train_y
train_x = MyTrainingSET[1:(ncol(MyTrainingSET)-4)]
train_y = MyTrainingSET$Quotes_label
train_control <- trainControl(method = "cv",number = 5)
nb.m1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = train_control
)
nb.m1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = train_control
)
confusionMatrix(nb.m1)
search_grid <- expand.grid(usekernel = c(TRUE, FALSE),fL = 0:7, adjust = seq(0, 5, by = 1))
nb.m2 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = train_control,
tuneGrid = search_grid
)
search_grid <- expand.grid(usekernel = c(TRUE, FALSE),fL = 0:7, adjust = seq(0, 7, by = 1))
nb.m2 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = train_control,
tuneGrid = search_grid
)
nb.m2$results %>%
top_n(5, wt = Accuracy) %>%
arrange(desc(Accuracy))
ggplot(nb.m2) +
labs(
title = "NB Grid Search Results of Hyperparameters",
caption = glue("Created by Rui Qiu(rq47)
Source: Toronto Raptors' play-by-play data."))
pacman::p_load(tidyverse,reshape,naivebayes,e1071,caret,ggplot2)
ggplot(nb.m2) +
labs(
title = "NB Grid Search Results of Hyperparameters",
caption = glue("Created by Rui Qiu(rq47)
Source: Toronto Raptors' play-by-play data."))
ggplot(nb.m2) +
ggsave("nba-nb-svm/nb-tuning.png", plot = last_plot(), height = 6, width = 8)
nb.m2
ggplot(nb.m2) +
labs(title = "NB Grid Search Results of Hyperparameters")+
geom_line()
nb.m2
nb.m2$results
train_x = MyTrainingSET[1:(ncol(MyTrainingSET)-4)]
train_y = MyTrainingSET$Quotes_label
control <- trainControl(method = "cv",number = 5)
nb.m1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control
)
ggplot(nb.m1) +
geom_line()+
labs(title = "")
confusionMatrix(nb.m1)
ggplot(nb.m1) +
geom_boxplot()+
labs(title = "")
ggplot(nb.m1) +
geom_curve()+
labs(title = "")
ggplot(nb.m1) +
geom_density()+
labs(title = "")
confusionMatrix(nb.m1)
X <- varImp(nb.m2)
X <- varImp(nb.m1)
X <- caret::varImp(nb.m1)
nb.m1
varImp(nb.m1)
nb.m1
nb1$result
nb1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control
)
nb1$result
Predict <- predict(nb1,MyTestSET)
table(Predict,TestKnownLabels)
nb1$result
Predict <- predict(nb1,MyTestSET)
table(Predict,TestKnownLabels)
Predict <- predict(nb1,MyTestSET)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,reshape,naivebayes,e1071,caret,ggplot2)
RecordDF_A<-read.csv(file = 'Crypto_quotes_with_change_label.csv', stringsAsFactors=TRUE)
RecordDF_A[1:5,1:5]
# row number
ncol(RecordDF_A)
# col number
nrow(RecordDF_A)
str(RecordDF_A[,c(2:23)])
str(RecordDF_A[,25:ncol(RecordDF_A)])
RecordDF_A$MACD.indicator <- as.factor(RecordDF_A$MACD.indicator)
RecordDF_A$MACD.positionz <- as.factor(RecordDF_A$MACD.position)
RecordDF_A$EMA.trend <- as.factor(RecordDF_A$EMA.trend)
RecordDF_A$Quotes_label <- as.factor(RecordDF_A$Quotes_label)
table(RecordDF_A$Quotes_label)
# Drop token (useless col)
Token <- RecordDF_A$token
RecordDF_A<-RecordDF_A[-c(1)]
RecordDF_A <- na.omit(RecordDF_A)
# Train test split
DataSize=nrow(RecordDF_A) ## how many rows?
TrainingSet_Size<-floor(DataSize*(3/4)) ## Size for training set
TestSet_Size <- DataSize - TrainingSet_Size ## Size for testing set
set.seed(123)
MyTrainSample <- sample(nrow(RecordDF_A),
TrainingSet_Size,replace=FALSE)
# training data
MyTrainingSET <- RecordDF_A[MyTrainSample,]
# table(MyTrainingSET$Quotes_label)
# testing data
MyTestSET <- RecordDF_A[-MyTrainSample,]
# table(MyTestSET$Quotes_label)
# true label of test data
TestKnownLabels <- MyTestSET$Quotes_label
MyTestSET <- MyTestSET[ , -which(names(MyTestSET) %in% c("Quotes_label"))]
meltData <- melt(MyTrainingSET[2:(ncol(MyTrainingSET)-11)],ignore_index = FALSE)
boxplot(data=meltData, value~variable)
train_x = MyTrainingSET[1:(ncol(MyTrainingSET)-4)]
train_y = MyTrainingSET$Quotes_label
control <- trainControl(method = "cv",number = 5)
nb1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control
)
Predict <- predict(nb1,MyTestSET)
table(Predict,TestKnownLabels)
train_x = MyTrainingSET[1:(ncol(MyTrainingSET)-4)]
train_y = MyTrainingSET$Quotes_label
control <- trainControl(method = "cv",number = 5)
nb1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control
)
nb1$result
Predict <- predict(nb1,MyTestSET)
table(Predict,TestKnownLabels)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,reshape,naivebayes,e1071,caret,ggplot2)
RecordDF_A<-read.csv(file = 'Crypto_quotes_with_change_label.csv', stringsAsFactors=TRUE)
RecordDF_A[1:5,1:5]
# row number
ncol(RecordDF_A)
# col number
nrow(RecordDF_A)
str(RecordDF_A[,c(2:23)])
str(RecordDF_A[,25:ncol(RecordDF_A)])
RecordDF_A$MACD.indicator <- as.factor(RecordDF_A$MACD.indicator)
RecordDF_A$MACD.positionz <- as.factor(RecordDF_A$MACD.position)
RecordDF_A$EMA.trend <- as.factor(RecordDF_A$EMA.trend)
RecordDF_A$Quotes_label <- as.factor(RecordDF_A$Quotes_label)
table(RecordDF_A$Quotes_label)
# Drop token (useless col)
Token <- RecordDF_A$token
RecordDF_A<-RecordDF_A[-c(1)]
RecordDF_A <- na.omit(RecordDF_A)
# Train test split
DataSize=nrow(RecordDF_A) ## how many rows?
TrainingSet_Size<-floor(DataSize*(3/4)) ## Size for training set
TestSet_Size <- DataSize - TrainingSet_Size ## Size for testing set
set.seed(123)
MyTrainSample <- sample(nrow(RecordDF_A),
TrainingSet_Size,replace=FALSE)
# training data
MyTrainingSET <- RecordDF_A[MyTrainSample,]
# table(MyTrainingSET$Quotes_label)
# testing data
MyTestSET <- RecordDF_A[-MyTrainSample,]
# table(MyTestSET$Quotes_label)
# true label of test data
TestKnownLabels <- MyTestSET$Quotes_label
MyTestSET <- MyTestSET[ , -which(names(MyTestSET) %in% c("Quotes_label"))]
meltData <- melt(MyTrainingSET[2:(ncol(MyTrainingSET)-11)],ignore_index = FALSE)
boxplot(data=meltData, value~variable)
train_x = MyTrainingSET[1:(ncol(MyTrainingSET)-4)]
train_y = MyTrainingSET$Quotes_label
control <- trainControl(method = "cv",number = 5)
nb1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control
)
nb1$result
Predict <- predict(nb1,MyTestSET)
table(Predict,TestKnownLabels)
para <- expand.grid(usekernel = c(TRUE, FALSE),fL = 0:7, adjust = seq(0, 7, by = 1))
nb.m2 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control,
tuneGrid = para
)
ggplot(nb.m2) +
geom_line()+
labs(title = "")
X <- caret::varImp(nb1)
nb1$result
Predict <- predict(nb1,MyTestSET)
table(Predict,TestKnownLabels)
para <- expand.grid(usekernel = c(TRUE, FALSE),fL = 0:7, adjust = seq(0, 7, by = 1))
nb.m2 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control,
tuneGrid = para
)
ggplot(nb.m2) +
geom_line()+
labs(title = "")
varImp(nb1, scale = FALSE)
nb1
View(nb1)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,reshape,naivebayes,e1071,caret,ggplot2)
RecordDF_A<-read.csv(file = 'Crypto_quotes_with_change_label.csv', stringsAsFactors=TRUE)
RecordDF_A[1:5,1:5]
# row number
ncol(RecordDF_A)
# col number
nrow(RecordDF_A)
str(RecordDF_A[,c(2:23)])
str(RecordDF_A[,25:ncol(RecordDF_A)])
RecordDF_A$MACD.indicator <- as.factor(RecordDF_A$MACD.indicator)
RecordDF_A$MACD.positionz <- as.factor(RecordDF_A$MACD.position)
RecordDF_A$EMA.trend <- as.factor(RecordDF_A$EMA.trend)
RecordDF_A$Quotes_label <- as.factor(RecordDF_A$Quotes_label)
table(RecordDF_A$Quotes_label)
# Drop token (useless col)
Token <- RecordDF_A$token
RecordDF_A<-RecordDF_A[-c(1)]
RecordDF_A <- na.omit(RecordDF_A)
# Train test split
DataSize=nrow(RecordDF_A) ## how many rows?
TrainingSet_Size<-floor(DataSize*(3/4)) ## Size for training set
TestSet_Size <- DataSize - TrainingSet_Size ## Size for testing set
set.seed(123)
MyTrainSample <- sample(nrow(RecordDF_A),
TrainingSet_Size,replace=FALSE)
# training data
MyTrainingSET <- RecordDF_A[MyTrainSample,]
# table(MyTrainingSET$Quotes_label)
# testing data
MyTestSET <- RecordDF_A[-MyTrainSample,]
# table(MyTestSET$Quotes_label)
# true label of test data
TestKnownLabels <- MyTestSET$Quotes_label
MyTestSET <- MyTestSET[ , -which(names(MyTestSET) %in% c("Quotes_label"))]
meltData <- melt(MyTrainingSET[2:(ncol(MyTrainingSET)-11)],ignore_index = FALSE)
boxplot(data=meltData, value~variable)
train_x = MyTrainingSET[1:(ncol(MyTrainingSET)-4)]
train_y = MyTrainingSET$Quotes_label
control <- trainControl(method = "cv",number = 5)
nb1 <- train(
x = train_x,
y = train_y,
method = "nb",
trControl = control
)
nb1$result
Predict <- predict(nb1,MyTestSET)
table(Predict,TestKnownLabels)
varImp(nb1, scale = FALSE)
